# ~/.tmux.conf

# unbind default prefix and set it to ctrl-a
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# make delay shorter
set -sg escape-time 0



#### key bindings ####

# reload config file
bind r source-file ~/.tmux.conf \; display "Reloaded!"

## PANE
# pane movement shortcuts (same as vim)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes
bind-key H resize-pane -L 10
bind-key J resize-pane -D 10
bind-key K resize-pane -U 10
bind-key L resize-pane -R 10

# Equally resize all panes
bind-key = select-layout even-horizontal
bind-key | select-layout even-vertical

# Split horiziontal and vertical splits, instead of % and "
# Also open them in the same directory
bind-key v split-window -h -c '#{pane_current_path}'
bind-key s split-window -v -c '#{pane_current_path}'

# Disable confirm before killing
bind-key x kill-pane


## Window 
setw -g window-status-separator ""

# toogle last window by hitting again C-f
bind-key C-f last-window

# Start windows and pane numbering with index 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# re-number windows when one is closed
set -g renumber-windows on

# Pressing Ctrl+Shift+Left (will move the current window to the left. Similarly
# right. No need to use the modifier (C-b).
# bind-key -n C-S-Left swap-window -t -1
# bind-key -n C-S-Right swap-window -t +1



#### General Setting ####

# Set title
set -g set-titles on
set -g set-titles-string "#T"

# word separators for automatic word selection
setw -g word-separators ' @"=()[]_-:,.'
setw -ag word-separators "'"

# {n}vim compability
set -g default-terminal "screen-256color"

# Have a very large history
set -g history-limit 1000000



# Ref:https://github.com/fatih/dotfiles/blob/master/tmuxconf

######## iTerm + Tmux key integration #########
# First of all, iTerm can send hex codes for shortcuts you define. So for
# example you can send a hex code for the shortcut "c-f v" which in my case
# opens a vertical pane (see setting above). The hex code for this combination
# is: 0x06 0x76. There are many cases to find it out. One of them is the tool
# 'xxd'

# If you run "xxd -psd" and hit "c-f v" and then enter and finally c-c to exit
# , it outputs the following:
#
# 	$ xxd -psd
# 	^Fv
# 	06760a^C
#
# What matters is the sequence  06760a^C where:
#
# 	06 -> c-f
# 	76 -> v
# 	0a -> return
#	^C -> c-c
#
# From here, we know that 0x06 0x76 corresponds to "c-f v".
#
# Finally, inside the iTerm2 Key settings, I'm adding just various shortcuts,
# such as cmd-j, cmd-left, etc.. , select the option "send hex code" and the
# enter the hex code which I want to be executed, hence the tmux sequence. So
# when I press CMD + d in iterm, I send the sequence 0x06 0x76,
# which tmux inteprets it as opening a new pane. 
###############################################

######## Alacritty + Tmux key integration #########
# First of all, Alacritty can send hex codes for shortcuts you define. So for
# example you can send a hex code for the shortcut "c-f v" which in my case
# opens a vertical pane (see setting above). The hex code for this combination
# is: 0x06 0x76. There are many cases to find it out. One of them is the tool
# 'xxd'

# If you run "xxd -psd" and hit "c-f v" and then enter and finally c-c to exit
# , it outputs the following:
#
# 	$ xxd -psd
# 	^Fv
# 	06760a^C
#
# What matters is the sequence  06760a^C where:
#
# 	06 -> c-f
# 	76 -> v
# 	0a -> return
#	^C -> c-c
#
# From here, we know that 0x06 0x76 corresponds to "c-f v".
#
# Next step is to add a line to 'key_binding' setting in Alacritty:
#
#   - { key: D,        mods: Command,       chars: "\x06\x76"  } 
#
# That's it! The followings are the ones that I'm using:
#
#   key_bindings:
#     - { key: D,        mods: Command,       chars: "\x06\x76" } 
#     - { key: D,        mods: Command|Shift, chars: "\x06\x73" }
#     - { key: W,        mods: Command,       chars: "\x06\x78" }
#     - { key: H,        mods: Command,       chars: "\x06\x68" }
#     - { key: J,        mods: Command,       chars: "\x06\x6a" }
#     - { key: K,        mods: Command,       chars: "\x06\x6b" }
#     - { key: L,        mods: Command,       chars: "\x06\x6c" }
#     - { key: T,        mods: Command,       chars: "\x06\x63" }
#     - { key: Key1,     mods: Command,       chars: "\x06\x31" }
#     - { key: Key2,     mods: Command,       chars: "\x06\x32" }
#     - { key: Key3,     mods: Command,       chars: "\x06\x33" }
#     - { key: Key4,     mods: Command,       chars: "\x06\x34" }
#     - { key: Key5,     mods: Command,       chars: "\x06\x35" }
#     - { key: Key6,     mods: Command,       chars: "\x06\x36" }
#     - { key: Key7,     mods: Command,       chars: "\x06\x37" }
#     - { key: Key8,     mods: Command,       chars: "\x06\x38" }
#     - { key: Key9,     mods: Command,       chars: "\x06\x39" }
#     - { key: Left,     mods: Command,       chars: "\x06\x48" }
#     - { key: Down,     mods: Command,       chars: "\x06\x4a" }
#     - { key: Up,       mods: Command,       chars: "\x06\x4b" }
#     - { key: Right,    mods: Command,       chars: "\x06\x4c" }
#
# Finally, inside the iTerm2 Key settings, I'm adding just various shortcuts,
# such as cmd-j, cmd-left, etc.. , select the option "send hex code" and the
# enter the hex code which I want to be executed, hence the tmux sequence. So
# when I press CMD + d in iterm, I send the sequence 0x06 0x76,
# which tmux inteprets it as opening a new pane. 
###############################################
